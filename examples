; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @pi_task_construct(%struct.pmemobjpool* %0, i8* %1, i8* %2) #0 {
  %3 = bitcast i8* %1 to %struct.pi_task_proto*
  %4 = getelementptr inbounds %struct.pi_task, %struct.pi_task* %3, i32 0, i32 0
  %5 = bitcast %struct.pi_task_proto* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 %2, i64 32, i1 false)
  call void @pmemobj_persist(%struct.pmemobjpool* %0, i8* %3, i64 96)
  ret i32 0
}


static TOID(struct tree_map_node)
btree_map_create_split_node(TOID(struct tree_map_node) node,
	struct tree_map_node_item *m)
{
	TOID(struct tree_map_node) right = TX_ZNEW(struct tree_map_node);

	int c = (BTREE_ORDER / 2);
	*m = D_RO(node)->items[c - 1]; /* select median item */
	TX_ADD(node);
	set_empty_item(&D_RW(node)->items[c - 1]);

	/* move everything right side of median to the new node */
	for (int i = c; i < BTREE_ORDER; ++i) {
		if (i != BTREE_ORDER - 1) {
			D_RW(right)->items[D_RW(right)->n++] =
				D_RO(node)->items[i];
			set_empty_item(&D_RW(node)->items[i]);
		}
		D_RW(right)->slots[i - c] = D_RO(node)->slots[i];
		D_RW(node)->slots[i] = TOID_NULL(struct tree_map_node);
	}
	D_RW(node)->n = c - 1;

	return right;
}
